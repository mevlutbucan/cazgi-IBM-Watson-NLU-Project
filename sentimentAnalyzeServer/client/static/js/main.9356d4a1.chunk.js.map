{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","key","value","id","React","Component","App","state","innercomp","rows","cols","placeholder","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","output","data","label","style","color","fontSize","sendForEmotionAnalysis","emotion","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9356d4a1.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./bootstrap.min.css\";\n\nclass EmotionTable extends React.Component {\n  render() {\n    return (\n      <div>\n        <table className=\"table table-bordered\">\n          <tbody>\n            {Object.entries(this.props.emotions).map(([key, value]) => {\n              return (\n                <tr key={key.id}>\n                  <td>{key}</td>\n                  <td>{value}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\nexport default EmotionTable;\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport EmotionTable from \"./EmotionTable.js\";\n\nimport \"./bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    innercomp: (\n      <textarea id=\"textinput\" rows=\"4\" cols=\"50\" placeholder=\"TEXT\" />\n    ),\n    mode: \"text\",\n    sentimentOutput: [],\n    sentiment: true,\n  };\n\n  renderTextArea = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if (this.state.mode === \"url\") {\n      this.setState({\n        innercomp: (\n          <textarea id=\"textinput\" rows=\"4\" cols=\"50\" placeholder=\"TEXT\" />\n        ),\n        mode: \"text\",\n        sentimentOutput: [],\n      });\n    }\n  };\n\n  renderTextBox = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if (this.state.mode === \"text\") {\n      this.setState({\n        innercomp: (\n          <textarea id=\"textinput\" rows=\"1\" cols=\"50\" placeholder=\"URL\" />\n        ),\n        mode: \"url\",\n        sentimentOutput: [],\n      });\n    }\n  };\n\n  sendForSentimentAnalysis = () => {\n    this.setState({ sentiment: true });\n\n    let url = \".\";\n    if (this.state.mode === \"url\") {\n      url =\n        url +\n        \"/url/sentiment?url=\" +\n        document.getElementById(\"textinput\").value;\n    } else {\n      url =\n        url +\n        \"/text/sentiment?text=\" +\n        document.getElementById(\"textinput\").value;\n    }\n    axios.get(url).then((response) => {\n      let output;\n      if (typeof response.data === \"string\") {\n        output = <div>{response.data}</div>;\n      } else if (response.data.label === \"positive\") {\n        output = <div style={{ color: \"green\", fontSize: 20 }}>POSITIVE</div>;\n      } else if (response.data.label === \"negative\") {\n        output = <div style={{ color: \"red\", fontSize: 20 }}>NEGATIVE</div>;\n      } else {\n        output = <div style={{ color: \"orange\", fontSize: 20 }}>NEUTRAL</div>;\n      }\n      this.setState({ sentimentOutput: output });\n    });\n  };\n\n  sendForEmotionAnalysis = () => {\n    this.setState({ sentiment: false });\n\n    let url = \".\";\n    if (this.state.mode === \"url\") {\n      url =\n        url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n    } else {\n      url =\n        url +\n        \"/text/emotion/?text=\" +\n        document.getElementById(\"textinput\").value;\n    }\n    axios.get(url).then((response) => {\n      if (typeof response.data === \"string\") {\n        this.setState({\n          sentimentOutput: <div>{response.data}</div>,\n        });\n      } else\n        this.setState({\n          sentimentOutput: <EmotionTable emotions={response.data.emotion} />,\n        });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button className=\"btn btn-info\" onClick={this.renderTextArea}>\n          Text\n        </button>\n        <button className=\"btn btn-dark\" onClick={this.renderTextBox}>\n          URL\n        </button>\n        <br />\n        <br />\n        {this.state.innercomp}\n        <br />\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>\n          Analyze Sentiment\n        </button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>\n          Analyze Emotion\n        </button>\n        <br />\n        {this.state.sentimentOutput}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}